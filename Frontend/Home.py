import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()
api_ip = os.getenv('API_IP_DEV')

# Streamlit App
st.title("Welcome to Threat Doctor")
st.markdown(
    '<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>',
    unsafe_allow_html=True,
)

# Initialize DataFrame
df = pd.DataFrame()

# Create Tabs
tab1, tab2 = st.tabs(["Manually Enter Input", "File Upload Dataset"])

# Manual Input Tab
with tab1:
    UPN = st.text_input("Enter the UPN")
    st.subheader("Enter counts for each description")

    if "submit_button_pressed" not in st.session_state:
        st.session_state["submit_button_pressed"] = False

    with st.form(key='description_form'):
        auth_access_anomalies = st.number_input("Authentication and Access Anomalies", min_value=0, step=1, key='auth_access')
        impersonation_phishing = st.number_input("Impersonation and Phishing", min_value=0, step=1, key='impersonation_phishing')
        threats_malicious_activity = st.number_input("Threats and Malicious Activity", min_value=0, step=1, key='threats_malicious')
        file_search_activity = st.number_input("File and Search Activity", min_value=0, step=1, key='file_search')

        submit_button = st.form_submit_button(label='Submit')

    if submit_button:
        st.session_state["submit_button_pressed"] = True

    if st.session_state["submit_button_pressed"]:
        if st.button("Predict Scores"):
            payload = {
                "auth": auth_access_anomalies,
                "file_and_search": file_search_activity,
                "impersonation": impersonation_phishing,
                "threats": threats_malicious_activity
            }

            try:
                response = requests.post(f"{api_ip}/single_response/", json=payload)
                response.raise_for_status()
                scores_JSON = response.json()
                st.write("Client: Received payload")

                scores_dict = {
                    'Model Name': [score['Model Name'] for score in scores_JSON],
                    'Predicted Score': [score['Predicted Score'] for score in scores_JSON]
                }
                df = pd.DataFrame(scores_dict)
                st.dataframe(df)

            except requests.exceptions.RequestException as e:
                st.write(f"Connection Establishment Error: {e}")

# File Upload Tab
with tab2:
    uploaded_file = st.file_uploader(label="Choose a CSV", type=['csv'])
    if uploaded_file is not None:
        st.write('File uploaded:', uploaded_file.name)

        try:
            files = {"file": uploaded_file.getvalue()}
            response = requests.post(f"{api_ip}/uploadfile/", files=files)
            response.raise_for_status()
            st.write("File successfully sent to the server")

            st.download_button(
                label="Download processed file",
                data=response.content,
                file_name="Scored_" + uploaded_file.name,
                mime="application/octet-stream"
            )

        except requests.exceptions.RequestException as e:
            st.write(f"Error uploading file: {e}")
