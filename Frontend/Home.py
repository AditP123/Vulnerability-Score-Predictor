import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os
import chardet
from model_api.model_predictions import bulk_deep_learning, bulk_prediction, adjust_df
from model_api.text_classification import bulk_classify_text 

def detect_encoding(file):
    raw_data = file.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding']
    file.seek(0)  # Reset file pointer to the beginning
    return encoding

# Load environment variables
load_dotenv()
api_ip = os.getenv('API_IP_DEV')

# Streamlit App
st.title("Welcome to Threat Doctor")
st.markdown(
    '<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>',
    unsafe_allow_html=True,
)

# Initialize DataFrame
df = pd.DataFrame()

if 'processed_file' not in st.session_state:
    st.session_state.processed_file = None
    st.session_state.file_name = None

with st.tabs(["Upload and Process File"])[0]:
    uploaded_file = st.file_uploader(label="Choose a CSV file", type=['csv'])
    if uploaded_file is not None:
        st.write('File uploaded:', uploaded_file.name)

        try:
            encoding = detect_encoding(uploaded_file)
            new_df = pd.read_csv(uploaded_file, encoding = encoding)
            
            print(f"Model API: Converted to Dataframe")

            print(f"Model API: Classifying Descriptions ")
            new_df = bulk_classify_text(new_df)
            print("Model API: Classified Descriptions")

            print("Model API: Predicting using ML algorithms")
            new_df = bulk_prediction(new_df)
            print("Model API: Finished ML Predictions")

            print("Model API: Predicting using MLP regressor")
            new_df = bulk_deep_learning(new_df)
            print("Model API: Finished DL Predictions")

            print("Model API: Adjusting Scores")
            new_df = adjust_df(new_df)
            print("Model API: Returning Dataframe")
            
            # st.dataframe(df)

            prepared_file = f"Scored_{uploaded_file.name}"
            new_df.to_csv(prepared_file, index = False)

            with open(prepared_file, "rb") as file:
                btn = st.download_button(
                    label="Download processed file",
                    data=file,
                    file_name=prepared_file,
                    mime="text/csv"
                )

        except Exception as e:
            st.write(f"Error : {e}")
