import torch
import json
import os
import pandas as pd
from transformers import DistilBertForSequenceClassification, DistilBertTokenizer
from safetensors.torch import load_file

try:
    tokenizer = DistilBertTokenizer.from_pretrained('models/Text Classifier/', local_files_only=True)

    config_path = "models/Text Classifier/config.json"
    # Load the config.json file
    with open(config_path, 'r') as f:
        config = json.load(f)

except Exception as error:
    print(error)

# Load the model
model = DistilBertForSequenceClassification.from_pretrained('models/Text Classifier/')

# Load the weights from the safetensors file
weights = load_file('models/Text Classifier/model.safetensors')
model.load_state_dict(weights, strict=False)


# Mapping
threat_mapping = {
    0: 'Authentication and Access Anomalies', 
    1: 'File and Search Activity', 
    2:'Impersonation and Phishing', 
    3:'Threats and Malicious Activity'
    }

# Put the model in evaluation mode
model.eval()

def classify_text(input):
    inputs = tokenizer(input, return_tensors='pt')
    # Make a prediction
    with torch.no_grad():
        outputs = model(**inputs)
    # Get the predicted class
    predicted_class = torch.argmax(outputs.logits, dim=1).item()
    return threat_mapping[predicted_class]

def bulk_classify_text(df):
    # Apply the prediction function to the corresponding row in the DataFrame
    df['Classfied Description'] = df['Description'].apply(classify_text)
    return df

# df = pd.read_csv("C:/Users/Adit Prasad/Downloads/Sample Final_Input.csv", encoding = 'cp1252')
# df = bulk_classify_text(df)
# print(df)