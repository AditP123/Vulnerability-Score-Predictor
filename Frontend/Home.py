import streamlit as st
import pandas as pd
import requests
from dotenv import load_dotenv
import os

load_dotenv()
api_ip = os.getenv('API_IP')

st.title("Welcome to Threat Doctor")
st.markdown('<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>', unsafe_allow_html=True)

df = pd.DataFrame()
tab1, tab2 = st.tabs(["Manually Enter Input", "File Upload Dataset"])

with tab1:
    UPN = st.text_input("Enter the UPN")
    st.subheader("Enter counts for each description")

    if "submit_button_pressed" not in st.session_state:
        st.session_state["submit_button_pressed"] = False

    with st.form(key='description_form'):
        auth_access_anomalies = st.number_input("Authentication and Access Anomalies", min_value=0, step=1, key='auth_access')
        impersonation_phishing = st.number_input("Impersonation and Phishing", min_value=0, step=1, key='impersonation_phishing')
        threats_malicious_activity = st.number_input("Threats and Malicious Activity", min_value=0, step=1, key='threats_malicious')
        file_search_activity = st.number_input("File and Search Activity", min_value=0, step=1, key='file_search')

        # Form submission button
        submit_button = st.form_submit_button(label='Submit')

    # If form is submitted, display the table
    if submit_button:
        st.session_state["submit_button_pressed"] = True

    if st.session_state["submit_button_pressed"]:
        if st.button("Predict Scores"):
            response = requests.get(f"{api_ip}/single_response/{auth_access_anomalies} {impersonation_phishing} {threats_malicious_activity} {file_search_activity}")
            scores_JSON = False
            if response.status_code == 200:
                scores_JSON = response.json()

            else:
                st.write("Connection Establishment Error")

            if scores_JSON:
                scores_dict = {}
                scores_dict['Model Name'] = []
                scores_dict['Predicted Score'] = []

                for dict in scores_JSON:
                    scores_dict['Model Name'].append(dict['Model Name'])
                    scores_dict['Predicted Score'].append(dict['Predicted Score'])
                df = pd.DataFrame(scores_dict)
                st.dataframe(df)

            else:
                st.write("Uh Oh Something's wrong")

with tab2:
    uploaded_file = st.file_uploader(label = "Choose a CSV ", type = ['.csv'])
    if uploaded_file is not None:
        st.write('File uploaded', uploaded_file.name)
        # Post the file to the FastAPI server
        files = {"file": uploaded_file.getvalue()}
        response = requests.post( f"{api_ip}/uploadfile/", files=files)

        if response.status_code == 200:
            st.write("File successfully sent to the server")

            # Prepare download link
            st.download_button(
                label="Download processed file",
                data=response.content,
                file_name= "Scored_" + uploaded_file.name,
                mime="application/octet-stream"
            )