
import pandas as pd
import numpy as np


df = pd.read_csv("C:/Users/Adit Prasad/Downloads/ATP_TI_MCAS_AADP.csv", encoding = 'cp1252')
df.drop(["Unnamed: 0"], axis = 1, inplace = True)
df


df.columns


weights = {
    'Malware': 10.0,
    'Brand impersonation': 9.0,
    'Malicious URL reputation': 8.0,
    'Threats': 7.0,
    'Suspicious Email': 6.0,
    'Failed log on': 5.0,
    'Delete messages from Deleted Items folder': 4.0,
    'Threat Count': 3.0
}

# Calculate the weighted sum with the new weights
df['Weighted_Sum'] = (
    df['Malware'] * weights['Malware'] +
    df['Brand impersonation'] * weights['Brand impersonation'] +
    df['Malicious URL reputation'] * weights['Malicious URL reputation'] +
    df['Threats'] * weights['Threats'] +
    df['Suspicious Email'] * weights['Suspicious Email'] +
    df['Failed log on'] * weights['Failed log on'] +
    df['Delete messages from Deleted Items folder'] * weights['Delete messages from Deleted Items folder'] +
    df['Threat Count'] * weights['Threat Count']
)

# Calculate the new score
S_min = 0
S_max = 520.0

df['New Score'] = 0.7 + 0.2 * (df['Weighted_Sum'] - S_min) / (S_max - S_min)

# Drop the intermediate 'Weighted_Sum' column
df.drop(columns=['Weighted_Sum'], inplace=True)


# crazy_weights = {
#     'Malware': 100.0,
#     'Brand impersonation': 90.0,
#     'Malicious URL reputation': 80.0,
#     'Threats': 70.0,
#     'Suspicious Email': 60.0,
#     'Failed log on': 50.0,
#     'Delete messages from Deleted Items folder': 40.0,
#     'Threat Count': 30.0
# }

# # Initialize the new score column
# df['New Score'] = 0

# # Calculate the new score for each user
# for index, row in df.iterrows():
#     weighted_sum = 0
#     max_weighted_sum = 0
#     for description, weight in crazy_weights.items():
#         count = row[description]
#         if count > 0:
#             weighted_sum += count * weight
#             max_weighted_sum += 10 * weight  # As the range is from 0 to 10

#     if max_weighted_sum > 0:
#         normalized_score = weighted_sum / max_weighted_sum
#         new_score = 0.7 + 0.2 * normalized_score
#         df.at[index, 'New Score'] = new_score


df['New Score'] = df['New Score'] * 1.05
df.drop(['New Score 2'], axis = 1, inplace = True)


df.to_csv("C:/Users/Adit Prasad/Downloads/ATP_TI_MCAS_AADP_output_test.csv")

 [markdown]
# ### Trying Formula devised on Sample Final Input Cleaned


df = pd.read_csv("C:/Users/Adit Prasad/Downloads/Sample_Final_Input_Cleaned_Text_Classification.csv", encoding = 'cp1252')
df


# crazy_weights = {
#     'Threats_and_Malicious_Activity': 400.0,
#     'Impersonation_and_Phishing': 300.0,
#     'Authentication_and_Access_Anomalies': 200.0,
#     'File_and_Search_Activity': 100.0
# }

# # Initialize the new score column
# df['New Score'] = 0

# # Calculate the new score for each user
# for index, row in df.iterrows():
#     weighted_sum = 0
#     max_weighted_sum = 0
#     for description, weight in crazy_weights.items():
#         count = row[description]
#         if count >= 0:
#             weighted_sum += count * weight
#             max_weighted_sum += 50 * weight  # As the range is from 0 to 100

#     if max_weighted_sum > 0:
#         normalized_score = weighted_sum / max_weighted_sum
#         new_score = 0.7 + 0.2 * normalized_score
#         df.at[index, 'New Score'] = new_score


weights = {
    'Threats and Malicious Activity': 400.0,
    'Impersonation and Phishing': 350.0,
    'Authentication and Access Anomalies': 300.0,
    'File and Search Activity': 50.0
}

# Calculate the weighted sum with the new weights
df['Weighted_Sum'] = (
    df['Threats and Malicious Activity'] * weights['Threats and Malicious Activity'] +
    df['Impersonation and Phishing'] * weights['Impersonation and Phishing'] +
    df['Authentication and Access Anomalies'] * weights['Authentication and Access Anomalies'] +
    df['File and Search Activity'] * weights['File and Search Activity'] 
)

# Calculate the new score
S_min = 0
S_max = 3400.0

df['New Score'] = 0.7 + 0.2 * (df['Weighted_Sum'] - S_min) / (S_max - S_min)

# Drop the intermediate 'Weighted_Sum' column
df.drop(columns=['Weighted_Sum'], inplace=True)


df.to_csv("C:/Users/Adit Prasad/Downloads/Sample_Final_Input_Cleaned_Text_Classification_Output.csv")





