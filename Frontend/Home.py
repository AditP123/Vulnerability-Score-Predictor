import streamlit as st
import pandas as pd
import chardet
from io import BytesIO
from model_api.model_predictions import bulk_deep_learning, bulk_prediction, adjust_df
from model_api.text_classification import bulk_classify_text

def detect_encoding(file):
    raw_data = file.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding']
    file.seek(0)  # Reset file pointer to the beginning
    return encoding

# Streamlit App
st.title("Welcome to Threat Doctor")
st.markdown(
    '<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>',
    unsafe_allow_html=True,
)

# Initialize session state
if 'processed_file' not in st.session_state:
    st.session_state.processed_file = None
    st.session_state.file_name = None
    st.session_state.uploaded_file_name = None

with st.tabs(["Upload and Process File"])[0]:
    uploaded_file = st.file_uploader(label="Choose a CSV file", type=['csv'])
    
    if uploaded_file is not None:
        # Check if a new file is uploaded
        if st.session_state.uploaded_file_name != uploaded_file.name:
            # Reset the session state for a new file
            st.session_state.processed_file = None
            st.session_state.file_name = None
            st.session_state.uploaded_file_name = uploaded_file.name
        
        st.write('File uploaded:', uploaded_file.name)

        # Only process the file if it hasn't been processed yet
        if st.session_state.processed_file is None:
            try:
                encoding = detect_encoding(uploaded_file)
                new_df = pd.read_csv(uploaded_file, encoding=encoding)
                
                st.write("Processing file...")

                new_df = bulk_classify_text(new_df)
                new_df = bulk_prediction(new_df)
                new_df = bulk_deep_learning(new_df)
                new_df = adjust_df(new_df)

                # Convert DataFrame to CSV bytes
                csv = new_df.to_csv(index=False)
                csv_bytes = BytesIO(csv.encode(encoding))
                prepared_file_name = f"Scored_{uploaded_file.name}"

                # Store the processed file and name in session state
                st.session_state.processed_file = csv_bytes
                st.session_state.file_name = prepared_file_name

            except Exception as e:
                st.write(f"Error: {e}")

        # Provide the download button using the stored processed file
        if st.session_state.processed_file is not None:
            st.download_button(
                label="Download processed file",
                data=st.session_state.processed_file,
                file_name=st.session_state.file_name,
                mime="text/csv"
            )
