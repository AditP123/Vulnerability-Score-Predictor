import streamlit as st
import pandas as pd
import openpyxl

st.title("Welcome to Threat Doctor")
st.markdown('<span style="font-size: 22px;">In the digital age, safeguarding user data and maintaining cybersecurity is crucial. Threat Doctor is a powerful tool designed to assess the vulnerability of users based on their exposure to various cyber threats. By analyzing different types of threats and their severity, Threat Doctor provides a normalized vulnerability score for each user, helping security teams prioritize their efforts and mitigate risks effectively.</span>', unsafe_allow_html=True)

df = pd.DataFrame()
tab1, tab2 = st.tabs(["Manually Enter Input", "File Upload Dataset"])

if 'predict_button_pressed' not in st.session_state:
    st.session_state['predict_button_pressed'] = False

def create_row(num_columns):
    return {columns[i] : "" for i in range(num_columns)}

def delete_row(index):
    if 0 <= index < len(st.session_state['table_data']):
        del st.session_state['table_data'][index]

with tab1:
    st.header("Enter your details here")
    num_columns = 19
    columns = [
        "UPN", 
        "UPN Count", 
        "Access from anonymous IP address",
        "Access from infrequent location",
        "Access from Malware linked IP address",
        "Anonymous IP address",
        "Delete messages from Deleted Items folder",
        "Domain impersonation",
        "Failed Logon Activity",
        "FileAccessedExtended",
        "FileModifiedExtended",
        "Impossible travel activity",
        "Malicious URL reputation",
        "Mass download by a single user",
        "SearchQueryPerformed",
        "Suspicious email",
        "Threats",
        "Unfamiliar sign-in properties",
        "User impersonation"
    ]

# Initialize session state for the table data and input mode
    if 'table_data' not in st.session_state:
        st.session_state['table_data'] = []
    
    if 'new_row' not in st.session_state:
        st.session_state['new_row'] = create_row(num_columns)

# Button to add a new row
    if st.button("Add Row"):
        st.session_state['input_mode'] = True

# Input fields for new row inside a form
    if 'input_mode' in st.session_state and st.session_state['input_mode']:
        st.write("Enter data for the new row:")
        with st.form(key='new_row_form'):
            for col in columns:
                st.session_state['new_row'][col] = st.text_input(f"{col}", key=f"new_{col}")
            submitted = st.form_submit_button("Submit Row")

            if submitted:
                st.session_state['table_data'].append(st.session_state['new_row'].copy())
                st.session_state['new_row'] = create_row(num_columns)
                st.session_state['input_mode'] = False
                st.experimental_rerun()  # Rerun the script to clear the form

    max_value = len(st.session_state['table_data']) - 1 if st.session_state['table_data'] else 0 

# Display table
    st.write("Table Data")
    df = pd.DataFrame(st.session_state['table_data'])
    st.table(df)

    st.write("Delete a Row")
    delete_index = st.number_input("Enter the index of the row to delete (starting from 0):", min_value=0, max_value=max_value, step=1, format='%d')
    if st.button("Delete Row"):
        delete_row(delete_index)
        st.experimental_rerun()

with tab2:
    uploaded_file = st.file_uploader(label = "Choose a CSV or an Excel file", type = ['.csv','.xlsx'])
    if uploaded_file:
        if uploaded_file.endswith('.csv'):
            df = pd.read_csv(uploaded_file, encoding='cp1252')
        elif uploaded_file.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file) 
        # <Insert DataFrame cleaning function here and re-assign it to df>

#df now contains the final dataset to be trained that has been either entered manually or that has been uploaded

if st.button("Predict Scores"):
    st.session_state['predict_button_pressed'] = True
    if not df.empty:
    # <Call the model to predict the scores here>
    # Dummy table to display the output as of now.
        dummy = [['Bayesian ARD Regression', 0.7826122699386503], ['Decision Tree Regressor', 0.7905823529411765], ['Kernel Ridge Regressor', 0.0], ['Lars', 0.7826122699386503], ['Lasso', 0.7826122699386503], ['Linear Regression', 0.78329388], ['Orthogonal Matching Pursuit Regressor', 0.7826122699386503], ['Polynomial Regression', 0.78819163], ['Random Forest Regressor', 0.7859627316681684], ['Ridge Regression', 0.7826122699386503], ['Stochastic Gradient Descent Regressor', 0.7803424102533913], ['Support Vector Regressor', 0.6767554031199009]]
        df = pd.DataFrame(dummy, columns=['model','AvgProbability'])
        st.table(df)

    elif st.session_state['predict_button_pressed']:
        st.write("Enter the Dataset First!")